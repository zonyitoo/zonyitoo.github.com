<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sicily | 木頭人 - 宇騰]]></title>
  <link href="http://zonyitoo.github.com/blog/categories/sicily/atom.xml" rel="self"/>
  <link href="http://zonyitoo.github.com/"/>
  <updated>2013-01-23T14:08:45+08:00</updated>
  <id>http://zonyitoo.github.com/</id>
  <author>
    <name><![CDATA[Yutang Chung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SOJ 1211.商人的宣传 题解]]></title>
    <link href="http://zonyitoo.github.com/blog/2012/04/17/soj-1211-dot-shang-ren-de-xuan-chuan-ti-jie/"/>
    <updated>2012-04-17T13:25:00+08:00</updated>
    <id>http://zonyitoo.github.com/blog/2012/04/17/soj-1211-dot-shang-ren-de-xuan-chuan-ti-jie</id>
    <content type="html"><![CDATA[<h1>Description</h1>

<p>Bruce是K国的商人，他在A州成立了自己的公司，这次他的公司生产出了一批性能很好的产品，准备宣传活动开始后的第L天到达B州进行新品拍卖，期间Bruce打算将产品拿到各个州去做推销宣传,以增加其影响力。</p>

<p>K国有很多个州,每个州都与其他一些州相邻,但是K国对商人作宣传却有一些很奇怪的规定：</p>

<p>1、 商人只能从某些州到达另外一些州，即连通路线是单向的，而且有些州可能是到达不了的。</p>

<p>2、 商人不允许在同一个州连续宣传两天或以上，每天宣传完必须离开该州。</p>

<p>3、 商人可以多次来到同一个州进行宣传。</p>

<p>“我必须找出一条影响力最大的路线才行”，Bruce想，”但我首先必须知道到底有多少这种符合规定的宣传路线可供我选择。”现在Bruce把任务交给了你。并且出于考虑以后的需要，你还要帮他算出给出的两州之间的路线的总数。</p>

<h1>Input</h1>

<p>输入文件第一行包含三个整数n,m,L（1≤n,L≤100），分别表示K国的州数、连通路线的数量，以及多少天后必须到达B州。接下来有m行，每行一队整数x,y（1≤x,y≤n），表示商人能从x州到达y州。</p>

<p>第m+2行为一个整数q（1≤q≤100），表示Bruce有q个询问。下面q行每行两个整数A,B（1≤A,B≤n），即A、B州的位置。</p>

<h1>Output</h1>

<p>输出文件包含q行，每行一个整数t，为所求的从A州到B州满足上述规定的路线总数。</p>

<p>输入数据中的询问将保证答案t在长整数范围内，即t&lt;2<sup>31。</sup></p>

<h1>Sample Input</h1>

<p>4 5 6</p>

<p>1 2</p>

<p>2 3</p>

<p>3 4</p>

<p>4 1</p>

<p>2 4</p>

<p>2</p>

<p>1 4</p>

<p>4 2</p>

<h1>Sample Output</h1>

<p>2</p>

<p>1</p>

<h1>Solving</h1>

<p>题意已经很很显然了，那就直入正题，如何解决这个题目？</p>

<p>题目一看就是一个找路的问题，但难点在于如何找出所有可以走的路和对于每一个询问都能迅速地给出答案。</p>

<p>为了应对多个询问，那必须要有预处理，在接受完路线图的输入之后，马上把所有可能问到的A与B之间的路线总数都算出来存在一个数据结构中。</p>

<p>计算每个A到B之间的路线，可以用分治的思想，把大问题化小，利用之前已计算过的结果结合得出更远的两个城市之间的结果。</p>

<h1>Code</h1>

<p>```cpp</p>

<h1>include <cstdio></h1>

<h1>include <stack></h1>

<h1>include <vector></h1>

<h1>include &lt;memory.h></h1>

<p>using namespace std;</p>

<p>struct {</p>

<pre><code>int u;
int v;
</code></pre>

<p>} w[10010];</p>

<p>int main() {</p>

<pre><code>int f[110][110][110];
int n, m, l;
int a, b;
memset(f, 0, sizeof(f));
scanf("%d%d%d", &amp;n, &amp;m, &amp;l);
int v, u;
for(int i = 1; i &lt;= m; ++ i) {
    scanf("%d%d", &amp;w[i].u, &amp;w[i].v);
    f[1][w[i].u][w[i].v] = 1;
}
int q;
scanf("%d", &amp;q);
for(int i = 2; i &lt;= l; ++ i) {
    for(int j = 1; j &lt;= n; ++ j) {
        for(int k = 1; k &lt;= m; ++ k) {
            f[i][j][w[k].v] += f[i - 1][j][w[k].u];
            //printf("f[%d][%d][%d]=%d %d\n", i, j, w[k].v, f[i][j][w[k].v], f[i - 1][j][w[k].u]);
        }
    }
}
while(q --) {
    scanf("%d%d", &amp;a, &amp;b);
    printf("%d\n", f[l][a][b]);
}
return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
