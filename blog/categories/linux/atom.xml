<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 木头人 - 宇騰]]></title>
  <link href="http://zonyitoo.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://zonyitoo.github.com/"/>
  <updated>2012-11-18T19:33:06+08:00</updated>
  <id>http://zonyitoo.github.com/</id>
  <author>
    <name><![CDATA[Yutang Chung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arch软件安装小记之“Gnome Tweak Tool”]]></title>
    <link href="http://zonyitoo.github.com/blog/2012/10/22/archruan-jian-an-zhuang-xiao-ji-zhi-gnome-tweak-tool/"/>
    <updated>2012-10-22T13:56:00+08:00</updated>
    <id>http://zonyitoo.github.com/blog/2012/10/22/archruan-jian-an-zhuang-xiao-ji-zhi-gnome-tweak-tool</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>这次毅然换了ArchLinux之后，虽然安装很快，也很快就进入了稳定使用期，但是关于软件的纠结一直存在，今天我才真正地解决了VIM的那个compile with +Python的错误问题，也顺便解决一个从安装之后一直纠结至今的问题——Python。其实归根结底是我自己的问题，我自己让自己纠结了那么久而不自知。</p>

<p>下面用GnomeTweakTool的安装过程来发泄一下。</p>

<h1>Gnome Tweak Tool</h1>

<p>安装这个东西很简单，至少在<a href="http://wiki.archlinux.org/">ArchWiki</a>上看，是的。但是我装的时候却无限纠结。</p>

<p>```bash</p>

<h1>Install the gnome-tweak-tool</h1>

<p>sudo pacman -S gnome-tweak-tool
```</p>

<p>通常，一个普通青年的电脑就这么一句之后Gnome Tweak Tool就运行起来了，但我的不是，运行后提示：</p>

<p>```bash
$ gnome-tweak-tool
Trackback (most recent call last):
  File "usr/bin/gnome-tweak-tool", line 20, in <module></p>

<pre><code>import gi
</code></pre>

<p>ImportError: No module named gi
<code>``
从这一句来看，它的意思就是我没装和这个</code>Module gi<code>有关的库啰，百度一查，发现要装</code>python-gobject`，那简单，快速地用Pacman</p>

<p><code>bash
sudo pacman -S python-gobject
</code></p>

<p>装完之后问题依旧。其实这里已经把我的菜鸟本质暴露无遗，应该先用<code>pacman -Ss python-gobject</code>查一下嘛。结果查出来是，<strong>python-gobject</strong>是用于Python3的，而<strong>python-gobject2</strong>才是用于Python2！！！</p>

<p>很高兴地装完<strong>python-gobject2</strong>后，问题依旧…………</p>

<h1>网上解法</h1>

<p>百度很久无果，换为Google，进入一片鸟语的海洋中。但不得不佩服Google，因为它总能找到我想要的东西！</p>

<blockquote><p>把/usr/bin/gnome-tweak-tool的第一句/usr/bin/env python2改成/usr/bin/python</p></blockquote>

<p>改了之后，确实刚才的问题解决了，因为我在Python的交互式终端里输入<code>import gi</code>发现是不报错的，所以这个解法应该是可行。但是！问题是！！它又出了一个缺少Module的提示，这次的Module为<code>gtweak</code></p>

<p>纠结，还是继续百度Google。这次是竟然无果！完全无解！无敌纠结！</p>

<h1>无意中的解决</h1>

<p>看了N页的百度谷歌，当然也学到了不少完全无关的东西，比如说<code>/usr/lib/python2.7/site-packages</code>这个文件夹里面放的就是那些引用库，我在里面竟然就发现了<code>gtweak</code>！但是Python找不到！什么原因？</p>

<p>那返回信息在我心中纠结了一天之后，某天晚上我<code>ls</code>出我的<code>/usr/bin</code>里面的文件一个一个地看，看看系统里面都有什么可执行程序时，看到了那堆<code>python</code>, <code>python2</code>,<code>python2.7</code>等等的一堆，突然灵感一现，把它改成<code>python2</code>行不行？</p>

<p>```bash /usr/bin/gnome-tweak-tool</p>

<h1>!/usr/bin/python2</h1>

<pre><code>...Other codes...
</code></pre>

<p>```</p>

<h1>真正的问题</h1>

<p>当然，能解决的方法就是最好的方法，后来也就没管了。不过VIM一直弹Error说我在编译VIM的时候应该<code>+Python</code>，虽然不影响我日常使用，但是看起来好不爽。于是今天就下了<strong>VIM7.3</strong>的源码编译安装，顺便加了所谓<code>+Python</code>的选项</p>

<p><code>bash
./configure --enable-tclinterp  --enable-rubyinterp --enable-cscope --enable-multibyte --enable-pythoninterp=yes --enable-xim --enable-fontset --enable-gui=auto --enable-gnome-check --enable-gtk2-check  --with-features=huge  --with-python-config-dir=/usr/lib/python2.7/config
make
sudo make install
</code></p>

<p>然后看起来是完全正确的，没有找到任何问题，但是！弄完之后还是说我要+Python！我就纳闷了，不是已经+Python编译了么？还想怎样！</p>

<p>然后我正想写博喷这个问题，要装Retext，但是装完之后又是开不了，而且出错提示还是Python的。按照之前的“经验”，我果断地把<code>/usr/bin/retext</code>的头那句改成<code>/usr/bin/python2</code>然后再装了它说的依赖包<code>PyQt</code>，能打开，但是又有出错提示……</p>

<p>按理说……一个软件出问题就算了，怎么可能每个软件都出问题，而且问题表现还是类似的！</p>

<h4>又是无意的一解</h4>

<p>上面说要装<code>PyQt</code>的库，装完之后其实Retext还是找不到<code>PyQt4</code>这个库的。在<code>/usr/lib/python2.7/site-packages/</code>里面果断也找到了PyQt4，那样子问题就应该出在Python本身！</p>

<p>上面的解决问题的方法都是把<code>/usr/bin/env python2</code>改成<code>/usr/bin/python2</code>，为什么这样一改就行了呢？我在终端试了下，发现直接打<code>python2</code>然后<code>import PyQt4</code>是找不到模块，而<code>/usr/bin/python2</code>然后<code>import PyQt4</code>之后，是找得到的！！！！！</p>

<h4>曙光</h4>

<p>由上面可知，在系统环境里的<code>python2</code>并非<code>/usr/bin/python2</code>。回想起我装系统的时候是自己编译Python2，那是不是就意味着是它们的安装路径并不一样而导致系统里有两个Python2？</p>

<p><code>bash
which python2
</code></p>

<p>这里显示<code>/usr/local/bin/python2</code>，原来问题的症结在此！它用了我原来自已编译的Python2.7而不是Pacman所装的Python2.7！</p>

<h4>解决</h4>

<p>知道了问题所在，那么解决就容易了，直接删掉这些东西就好了</p>

<p><code>bash
cd /usr/local/bin
rm python*
</code></p>

<p>至此，问题宣告解决，Gnome-tweak-tool完美工作，Retext也是。</p>

<h1>小结</h1>

<p>这次关于系统中有两个Python2.7的问题的确纠结，但却给我以后解决问题一个很好的思路，先要想想以前自己对系统做过什么和这个问题的产生有关的事情，然后再通过测试来发现问题，Google和百度出类似的解决方案。</p>

<p>没有这次的错误，我不会知道在以后原码编译的时候<code>./configure</code>后面的参数要加<code>--prefix=/usr</code>，在装软件之前记得要先删干净系统中原来软件的残留。感谢<strong>ArchLinux</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch安装小记]]></title>
    <link href="http://zonyitoo.github.com/blog/2012/04/22/archan-zhuang-xiao-ji/"/>
    <updated>2012-04-22T13:29:00+08:00</updated>
    <id>http://zonyitoo.github.com/blog/2012/04/22/archan-zhuang-xiao-ji</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>这次安装<strong>ArchLinux</strong>的冲动来自于<strong>LPY师弟</strong>，这个技术宅师弟喜欢钻研东西，还有<strong>Maple师兄</strong>。他们都建议我说用<strong>ArchLinux</strong>更加深入底层，有更多的机会去定制和体验过程，对于学习很有好处。当然这个其中一个原因，另外一个原因就是有一个很坑的<a href="http://www.zegeniestudios.net/ldc/">测试你最适合用哪个Linux发行版</a>的测试，得出的结果是</p>

<blockquote><p>Ubuntu 100%
OpenSUSE 100%
Mandriva 100%
…下面就是LinuxMint，Fedora…</p></blockquote>

<p>反正意思就是，我最好还是用一些比较高级的发行版，Gentoo、Arch这些发行版还是不适合我的= =。看了之后很不爽，浑身都不爽。于是拿起U盘向<strong>Zero</strong>拿了个<strong>ArchLinux i686</strong>版本写到盘上然后二话不说就把Ubuntu 11.10的盘全格了重新分了区。虽然是有点冲动，冲动得就只保存了<code>.vimrc</code>和<code>.vim</code>和<strong>eclipse</strong>的workspace就马上全盘格掉！</p>

<h1>准备工作</h1>

<p>首先当然是要先去<a href="http://http//www.archlinux.org/">官网</a>下一个iso了。它分成三种，i686(32-bit), x86_64(amd64), Dual Architecture(x86 + x86_64合体).</p>

<p>下了得到个iso，然后写入U盘里。当然你可以刻成碟..。刻入U盘的方法很多，可以用一个通用的方法</p>

<p>``bash
dd if=iso_name of=/dev/sd"x"
```</p>

<p>其中，“x“必须是a, b, c, …，不要写成sdb1…因为是要写到整个U盘中去，所以要先备份一下。</p>

<p>然后，那就是备份一下当前系统中的东西了。如果是已经把<code>/home</code>单独作一个分区的话，可以不用格掉那个分区但是还是备份一下为妙。</p>

<p>最后，看一下你的硬盘分区记录，记一下哪个是sda1, sda2, sda3 ….</p>

<p>THEN, 重启，插入，设BIOS，开机…</p>

<h1>安装</h1>

<p><strong>ArchLinux</strong>的安装和<strong>Ubuntu</strong>、<strong>Fedora</strong>、<strong>OpenSUSE</strong>的安装过程不太一样（我又想起了那个测试），基本上都是一个蓝底界面操作，不过玩久了还是很容易看懂的。建议先看<a href="https://wiki.archlinux.org/index.php/Main_Page">ArchWiki</a>然后再装。</p>

<p>直接在引导界面那里点Arch Linux，然后就会进入到U盘里面的那个系统里，默认就是以root登录的。那么就可以直接执行</p>

<p><code>bash
/arch/setup
</code></p>

<p>然后就直接进入了安装程序。我是用core版的iso安装的，所以安装过程不用连网，如果是下了net版的，那可以看一下Wiki的相应部分。</p>

<p>刚开始是设置时钟（UTC），设置编辑器（vi），括号是我的选择</p>

<p>然后便是分区。这个工具真用来分区的话就太不好用了。所以我是在安装之前用Ubuntu的分区工具先分好区然后再过来装。如果是直接在这里装，那可以在运行<code>/arch/setup</code>之前运行<code>fdisk</code>来分区（用Alt+F3切换到另一个虚拟控制台）。在选项中</p>

<ul>
<li>Auto-Prepare（使用整个硬盘，安装程序给你分区，极不推荐）</li>
<li>Manually partition hard drives（手动配置硬盘，就是在这里分区）</li>
<li>Manually configure block devices, filesystems and mountpoints（手动配置块设备、文件系统和挂载点）</li>
<li>Roolback last filesystem changes（撤销最后更改）</li>
</ul>


<p>这些步骤完了之后就进到下一部，<strong>选择软件包</strong></p>

<ul>
<li>首先选择GRUB还是syslinux作为启动加载器，我先GRUB</li>
<li><p>然后选软件包组，有两个</p>

<ul>
<li>base 来自[core]软件源的最小基本系统，总是选中它并删除不用的软件包</li>
<li>base-devel 除了上面的工具还有附加工具如make和automake，建议用这个。（我进去之后还把其它所有的都选上了）</li>
</ul>
</li>
</ul>


<p>然后就安装软件包了，这个过程是等得最久的，5分钟左右。</p>

<p>然后就配置系统，因为<strong>Arch之道</strong>倡导纯粹性和开放性，不向用户隐藏任何过程，所以就一个一个配置文件给你过目之后再写入。通过看这些配置文件，你发现你会更加深入了解系统的最基本配置。</p>

<h4>/etc/rc.conf</h4>

<p><strong>ArchLinux</strong>使用<code>/etc/rc.conf</code>作为系统的主要配置文件。这个文件包含了广泛的配置信息，主要用于系统的启动。正如文件所说，它还包含了供<code>/etc/rc*</code>使用的配置信息。</p>

<h4>LOCALIZATION部分</h4>

<ul>
<li>LOCALE 是系统本地化设置，所有国际化的应用程序都会使用这个设置。运行locale -a可以显示可用设置。默认是en_US.UTF-8，如果要改成中文那就是zh_CN.UTF-8，但建议先不要改，因为虚拟控制台是不支持中文的，装了X之后再改也不迟</li>
<li>DAEMON_LOCALE 是否使用本地daemon，是yes那就是用$LOCALE作为环境变量</li>
<li>HARDWARECLOCK 刚才设的UTC</li>
<li>TIMEZONE 刚才设的时区</li>
<li>KEYMAP 默认是us</li>
<li>CONOLEFONT 控制台用的字体</li>
<li>CONSOLEMAP 定义了启动时setfont程序加载的控制台映射表</li>
<li>USECOLOR 如果用的是彩色显示器那就是“yes”</li>
</ul>


<p>我的LOCALIZATION</p>

<p><code>bash
LOCALE=”en_US.UTF-8”
DAEMON_LOCALE=”no”
HARDWARECLOCK=”UTC”
TIMEZONE=”Asia/Hong_Kong”
KEYMAP=”us”
CONSOLEFONT=
CONSOLEMAP=
USECOLOR=”yes”
</code></p>

<h4>HARDWARE部分</h4>

<ul>
<li>MODULES 可以在这里指定缺少那个模块</li>
</ul>


<p>可以暂时什么都不写。</p>

<h4>NETWORKING部分</h4>

<ul>
<li>HOSTNAME 随意设置，你的主机名字</li>
<li>然后设置网络，在宿舍用校园网的话直接用dhcp设置，即只需要interface=eth0</li>
</ul>


<h4>DAEMONS部分</h4>

<p>开机需要启动的脚本名字</p>

<ul>
<li>如果脚本名字前有！号，表示它不被执行</li>
<li>如果脚本名字前有@符号，则表示它会在后台被执行，即启动序列不等待脚本运行成功就会继续执行下一个脚本</li>
</ul>


<p>后面安装图形界面之后还会用到这个序列</p>

<h4>/etc/fstab</h4>

<p>这个文件来用指定启动挂载的磁盘和分区</p>

<p><strong>接下来的基本都可以不用修改直接保存</strong></p>

<h4>/etc/locale.gen</h4>

<p>这个文件是被命令<code>locale-gen</code>所读取，记录系统的locales信息，这些设置会用于本地化程序用于本地化显示。选出<strong>zh_CN</strong>的行，把前面的#移除就行。</p>

<h4>/etc/pacman.conf</h4>

<p>pacman在会每启动时都访问这个文件，这个文件定义了源和段（options），直接删除一些<code>include=</code>和<code>[repository]</code>前面的#号删掉就可以启用对应的源</p>

<p>安装的时候，默认设置就行了。</p>

<h4>/etc/pacman.d/mirrorlist</h4>

<p>看名字就知道，这个是为<strong>pacman</strong>选择镜像的文件，上面已经写好了一些<strong>China</strong>的镜像源，有两个教育网源，晚上更新非常快。</p>

<h4>Root密码</h4>

<p>这就不用解释了</p>

<h4>安装启动加载器，即GRUB</h4>

<p>同样，安装程序也把<code>/boot/grub/menu.lst</code>放出来给你过目。如果有windows，那就把最后那段关于win的引导注释弄掉，那就可以注释了。它默认是在首分区，如果你的win在首分区，那就不用改，不然就要改一下<code>root (hd0, 0)</code></p>

<p><strong>OK，到这里就算装完了系统了，回到界面，reboot重启，把U盘拔了就行。</strong></p>

<h1>进入系统</h1>

<p>进入系统之后要登录，那肯定是只有root</p>

<p>登录之后先连网。怎么连？如果要连无线，那就要看看<strong>ArchWiki</strong>里面的相关说明。我在安装的时候并未能识别我的无线网卡，所以我是采用连校园网的方式上网的。</p>

<h2>连接校园网</h2>

<p>连接校园网，首先就要使用一个客户端<a href="https://github.com/humiaozuzu/YaH3C">YaH3C</a>，用GIT把它CLONE到本地，然后保存在U盘上。</p>

<p>YaH3C是使用Python2.x的，所以要运行它还得装Python（Arch并不自带），所以还要到<a href="http://python.org/">Python官网</a>下一个2.7.3的源码包，也放到U盘里。</p>

<p>OK，准备完毕，开始装YaH3C</p>

<h4>安装Python2.7.3和YaH3C</h4>

<p>先把U盘插进电脑，然后把它挂载到一个地方（我用<code>/media/CONVEYOR</code>）</p>

<p><code>bash
mount /dev/sdb1 /media/CONVEYOR
</code></p>

<p>然后把它们都制到主文件夹并解压安装（因为没有装相关的对U盘的FAT文件系统的东西，所以是不能往里面写）</p>

<p><code>bash
cp -r YaH3C ~
cp Python-2.7.3.tgz ~
cd ~
tar -xvf Python-2.7.3.tgz
</code></p>

<p>最后当然就是安装这两个了，先安装Python</p>

<p>```bash
cd Python-2.7.3
./configure
make
make install</p>

<h1>上面过程比较久，可以找点东西做做</h1>

<p>```</p>

<p>然后为了以后使用，先加一个用户，增加用户用<code>adduser</code>，增加用户组用<code>groupadd</code></p>

<p>然后把新建的用户加入<code>sudoers</code>，就是向<code>/etc/sudoers</code>里面加</p>

<pre><code>username    ALL=(ALL) ALL
</code></pre>

<p>然后<code>exit</code>，用你的用户名登录，再运行<code>sudo yah3c</code>，如无意外，是可以登录的！</p>

<p>登录之后，还要一步<code>sudo dhcpcd eth0</code>，这就可以上网了！！</p>

<h1>更新</h1>

<p>由于iso是2011年的了，所以现在已经有很多的更新，那就先更新了系统再说。</p>

<p>先修改<code>/etc/pacman.conf</code>，将SigLevel设为”Never”，没有就手动加上（我装x86_64版的时候发现默认没有，而i686版默认就是Never）</p>

<p>然后执行</p>

<p><code>bash
pacman-key --init
pacman -S filesystem --force
rm /etc/profile.d/locale.sh
pacman -Syu
</code></p>

<p>我在<code>pacman-key --init</code>这一步一直卡着不能过，于是就直接跳过了，发现也可以用，可能与SigLevel="Never"有关吧。
<strong>2012-10-22更新：其实是因为没有收集到足够的随机数据，遇到这种问题时先执行<code>pacman-key --init</code>然后在键盘乱按「要乱按很久」，记住是乱按，然后就能生成了</strong></p>

<p>它会先升级<strong>pacman</strong>然后再升级系统，这里慢慢等上一段时间，深夜速度很快！</p>

<h1>装Gnome3</h1>

<p>在装这个之前我也装了不少东西，比如vim什么的先装好，那样就不用去用那个无比简陋的vi了。</p>

<h4>安装基础安装包</h4>

<p>Xorg</p>

<p><code>bash
pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils
</code>
mesa用于3D支持，3D工具glxgears和glxinfo都在mesa-demos里</p>

<p><code>bash
pacman -S mesa mesa-demos
</code></p>

<p>安装显卡驱动</p>

<ul>
<li>先通过lspci看看你的是什么显卡</li>
<li>通过<code>pacman -Ss xf86-video</code>看看有什么开源驱动可以用</li>
</ul>


<p>如果是用intel集显，那就可以装<code>xf86-video-intel</code>，或者是<code>xf86-video-ati</code>或<code>xf86-video-nv</code>，如果是想装闭源驱动，可以看<strong>ArchWiki</strong>相应部分，我直接用集显，然后把独显关掉，省电而且发热少。</p>

<p>安装输入设备，笔记本要装触摸驱动</p>

<p><code>bash
pacman -S xf86-input-synaptics
</code></p>

<p>装测试用的基本图形界面</p>

<p><code>bash
pacman -S xorg-twm xorg-xclock xterm
rm ~/.xinit
</code></p>

<p>安装消息总线DBUS</p>

<p><code>bash
pacman -S dbus
</code></p>

<p>然后现在就可以直接执行<code>startx</code>，理论上应该能看到一个简单的图形界面，上面有一些简单的可移动窗口和鼠标。如果验证完之后，在那个终端上输入<code>exit</code>就能退出。</p>

<blockquote><p>黑了屏怎么办？重启吧…</p></blockquote>

<h4>安装字体和Gnome</h4>

<p><code>bash
pacman -S ttf-dejavu wqy-zenhei gnome gnome-extra gdm
</code></p>

<p>其中<code>gnome-extra</code>可以选择一些你觉得有用的组件来装</p>

<p>写入<code>~/.xinitrc</code>启动gnome-session</p>

<p>```sh</p>

<h1>ONLY THIS LINE</h1>

<p>exec ck-launch-session gnome-session
```</p>

<blockquote><p>如果是x86_64，那么中间的ck-launch-session就不用写了</p></blockquote>

<h1>启动Gnome3！</h1>

<p>如无意外，直接执行<code>startx</code>即可启动Gnome3！</p>

<p>可能刚进去是一个Fallback的状态，那么可以Logout一下再进一次，就可以了。如果一直是Fallback状态，那可能驱动装得有问题。</p>

<p>记得，不是用root来执行<code>startx</code>的。</p>

<h1>配置Gnome3</h1>

<h4>修改/etc/inittab</h4>

<pre><code>改动1：
## Only one of the following two lines can be uncommented!
# Boot to console
#id:3:initdefault:
# Boot to X11
id:5:initdefault:

改动2：
# Example lines for starting a login manager
#x:5:respawn:/usr/bin/xdm -nodaemon
x:5:respawn:/usr/sbin/gdm -nodaemon
#x:5:respawn:/usr/bin/kdm -nodaemon
#x:5:respawn:/usr/bin/slim &gt;/dev/null 2&gt;&amp;1
</code></pre>

<h4>/etc/rc.conf</h4>

<pre><code>（1）中文化
LOCALE="zh_CN.UTF-8"
#LOCALE="en_US.UTF-8"
DAEMON_LOCALE="no"
HARDWARECLOCK="localtime"
TIMEZONE="Asia/Shanghai"

（2）将开机加载的模块添加到MODULES的模块中。
MODULES=(fuse )

（3）开机启动服务。@代表在后台（background）运行。
DAEMONS=(hwclock syslog-ng dbus network netfs crond gdm @networkmanager )
</code></pre>

<p>安装读写ntfs分区的<code>ntfs-3g</code></p>

<p><code>bash
pacman -S ntfs-3g
</code></p>

<p><strong>Ok，现在是装完了，reboot试试？</strong></p>

<h1>后记</h1>

<p>这次冲动安装ArchLinux也不是完全没有准备的，在之前就一直在虚拟机上面玩Arch，对它的一些命令也算是用过，不陌生。另外在最近一直在看ArchWiki的东西，所以安装起来并不是太费力。主要出的问题在于安装YaH3C的时候（这个是失误，没有用最新版的YaH3C），然后就是安装图形界面时候的事。在Wiki上<code>.xinitrc</code>里面写的是有那个<code>ck-launch-session</code>，在装完<code>x86_64</code>系统之后呢就发现这样子直接<code>startx</code>是不能成功启动图形界面的，在这里纠结了许久，排除了各种原因之后，最终万念俱灰的时候就想去试试把这句删了会怎样，结果删了就行了。</p>

<p>这次的安装看上去好像步骤不多，但我是从昨天晚上10点左右开始准备装，到今天下午5点多才宣告软件完全装好。所以系统还是不要乱重装，毕竟比较麻烦。而且时间大多都花在适应Arch上，因为以前在Ubuntu下用Apt-get可以把大多数的事情都帮我做好，而现在用pacman装的话，基本上就只会给我装好了软件包，而配置工作就交给我了。而且还有一些奇奇怪怪的问题会出现，翻了N页Google之后还是无果，解决还得靠自己的创造力，想想可能会是什么原因然后再换个方向去搜，最后恍然大悟的感觉非常的爽，让人非常享受。</p>

<p>下一篇，讲一下记录着我安装其它软件时遇到的小问题及解决方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[嵌入式Linux学习思路及参考资料(ARM+LINUX路线)]]></title>
    <link href="http://zonyitoo.github.com/blog/2012/04/15/qian-ru-shi-linuxxue-xi-si-lu-ji-can-kao-zi-liao-arm-plus-linuxlu-xian/"/>
    <updated>2012-04-15T13:17:00+08:00</updated>
    <id>http://zonyitoo.github.com/blog/2012/04/15/qian-ru-shi-linuxxue-xi-si-lu-ji-can-kao-zi-liao-arm-plus-linuxlu-xian</id>
    <content type="html"><![CDATA[<h1>嵌入式人才需求</h1>

<ol>
<li><strong>嵌入式应用工程师</strong>：主要面向计算机、软件工程相关专业。其基于某个平台，例如嵌入式Linux、Vxworks、WinCE的上层应用软件开发，开发语言主要采用嵌入式C/C++，主要领域网络、图形、数据库、音频、视频处理等。</li>
<li>嵌入式系统工程师：主要面向电子信息相关专业，基于某个处理器内核，例如ARM、MIPS、PPC等，主要开发语言为汇编语言及嵌入式C语言编程，主要从事BootLoader、操作系统及中间件移植等工作。</li>
<li><strong>嵌入式驱动工程师</strong>：主要面向电子信息、计算机相关专业，基于某个处理器，例如2410、2440、6410等平台，开发语言主要为嵌入式C语言，主要从事接口驱动</li>
</ol>


<h2>嵌入式学生都应具备以下基本能力</h2>

<ol>
<li><strong>至少</strong>一种嵌入式处理器（ARM）</li>
<li><strong>至少</strong>一种嵌入式操作系统（LINUX）</li>
<li>一套嵌入式开发工具（ADS、GCC、嵌入式交叉编译调试环境）</li>
<li>一类开发语言（ARM汇编、C/C++）</li>
</ol>


<p>另外，必须熟悉嵌入式软件开发流程并至少做一个嵌入式软件项目。</p>

<h1>从事嵌入式软件开发的好处</h1>

<ol>
<li>目前国内外这方面的人都很<strong>稀缺</strong></li>
<li>与企业计算等应用软件不同，嵌入式领域人才的工作强度通常低一些（但收入不低）</li>
<li>嵌入式不像应用软件那样容易被盗版</li>
</ol>


<h1>从事嵌入式软件开发的缺点</h1>

<ol>
<li><strong>入门起点较高</strong>，所用到的技术往往都有一定的难度，若软硬件基础不好，特别是操作系统级软件功底不深，则可能不适于此行。</li>
<li>这方面的企业数量要<strong>远少</strong>于企业计算类企业</li>
<li>有少数公司经常要硕士以上的人搞嵌入式，主要是基于嵌入式的难度，但大多数公司也并无此要求，只要有经验即可</li>
<li>平台依托强，换平台比较辛苦</li>
</ol>


<h1>方法步骤</h1>

<h2>1. 基础知识</h2>

<ul>
<li>数字电路</li>
<li>计算机组成原理</li>
<li>C/C++，嵌入式C</li>
<li>数据结构和算法</li>
<li>操作系统</li>
<li>网络</li>
<li>数据库</li>
</ul>


<p><strong>C语言参考书：</strong>
* The C++ Programming Language
* Pointers on C
* C traps and pitfalls
* Expert C Language</p>

<h2>2. Linux学习</h2>

<blockquote><p>使用Linux Linux应用编程开发 驱动开发和分析Linux内核</p></blockquote>

<p><strong>Linux基础参考书：</strong>
* 《Linux与Unix Shell编程指南》
* 《Red Head Linux 9系统管理与服务器配置》人民邮电出版社</p>

<p><strong>Linux应用编程开发：</strong>
* 《UNIX Network Programming（第3版）》机械工业出版社 网络编程用
* 《UNIX环境高级编程（第2版）》清华大学出版社 系统调用及编程工具书
* 《Linux高级程序设计（第2版）》人民邮电出版社 杨宗德 系统调用及编程，有很多救命，初学者很不错</p>

<p><strong>驱动开发和分析Linux内核：</strong>
* 《Linux内核设计与实现》陈莉君 机械工业出版社
* 《Linux设备驱动开发》中国电力出版社</p>

<h2>ARM＋Linux嵌入式系统开发</h2>

<p><strong>ARM基础学习</strong></p>

<ul>
<li>《嵌入式ARM系统原理与实例开发（第2版）》北京大学出版社
*《ARM体系结构与编程》杜春雷</li>
<li>S3C2410 Datasheet</li>
</ul>


<p><strong>嵌入Linux开发</strong>
买块板子，调试程序</p>

<blockquote><p>其实很多人有误区，觉得学嵌入式要有板子，在后期确实如此，但如果基础达不到，也就把例子拿来跑跑，只有以上基础，基本功达到才能够真正开发</p></blockquote>

<h2>深入学习</h2>

<ol>
<li>数字图像压缩技术：主要是应掌握MPEG、MP3等编解码算法和技术</li>
<li>通信协议及编程技术：TCP/IP协议、802.11、Bluetooth、GPRS、GSM、CDMA等</li>
<li>网络与信息安全技术：如加密技术、数据证书CA等</li>
<li>DSP（Digital Signal Process）技术，DSP处理器通过硬件实现数字信号处理算法</li>
</ol>


<h1>引用</h1>

<p>本文引用自<a href="http://www.mcuos.com/thread-5302-1-1.html">嵌入式开发联盟网版主</a>osboy的文章《嵌入式Linux学习思路及参考资料（ARM+LINUX路线）》</p>
]]></content>
  </entry>
  
</feed>
